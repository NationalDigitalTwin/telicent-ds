import{a as s,j as r,F as m}from"./emotion-react-jsx-runtime.browser.esm-CUMkBk-e.js";import{F as P,i as A}from"./index-EaYoR7Ht.js";import{T as q}from"./TeliChip-2hG-pJcP.js";import{T as x}from"./TeliSpinner-GVYS05SG.js";import"./ClockRotateLeft-4x8CH0v-.js";import"./TeliAddIcon-ZQkbF6ay.js";import{T as R}from"./TeliCloseIcon-DGO5iUA8.js";import"./TeliDeleteIcon-lxFU83CB.js";import"./TeliEditIcon-DLqRa-97.js";import{T as w}from"./TeliSearchIcon-RHfkGMQw.js";import"./TeliSortIcons-BvUzhX95.js";import{A as F}from"./TeliAutocomplete-955u3xbg.js";import{T as N}from"./TextField-Do7bRFuV.js";import{F as v,a as C}from"./Select-DvxZuTWq.js";function V({error:i,fullWidth:u,helperText:p,label:d,loading:l,maxHeight:c,mode:f,placeholder:h,startAdornment:T,width:I,getChipIcon:g=e=>e==null?void 0:e.icon,getOptionLabel:y=e=>(e==null?void 0:e.label)??e,...b}){const e=t=>{if(f==="search"){if(t==="base")return{openOnFocus:!0,autoComplete:!0,autoHighlight:!0};if(t==="InputProps")return{InputProps:{type:"search",startAdornment:r(w,{size:"sm"})}}}};return s(C,{error:i,sx:{width:I},fullWidth:u,children:[r(F,{disablePortal:!0,clearIcon:r(R,{}),popupIcon:r(P,{icon:A}),size:"small",className:"error",loading:l,renderInput:t=>{var o,n,a;return r(N,{...t,variant:"outlined",label:d,placeholder:h,error:i,InputProps:{...t.InputProps,...(o=e("InputProps"))==null?void 0:o.InputProps,startAdornment:s(m,{children:[T??((a=(n=e("InputProps"))==null?void 0:n.InputProps)==null?void 0:a.startAdornment),t.InputProps.startAdornment]}),endAdornment:s(m,{children:[l?r(x,{color:"inherit",size:14}):null,t.InputProps.endAdornment]})}})},renderTags:(t,o)=>t.map((n,a)=>r(q,{variant:"tertiary",size:"small",icon:g(n),label:y(n),...o({index:a})})),slotProps:{popper:{modifiers:[{name:"offset",options:{offset:[0,8]}}]}},ListboxProps:{sx:{maxHeight:c}},...e("base"),...b}),p?r(v,{children:p}):null]})}V.__docgenInfo={description:"",methods:[],displayName:"TeliAutocomplete",props:{error:{required:!1,tsType:{name:"boolean"},description:"If true, the component will be rendered in an error state"},getChipIcon:{required:!1,tsType:{name:"signature",type:"function",raw:"(option: Value) => any",signature:{arguments:[{type:{name:"Value"},name:"option"}],return:{name:"any"}}},description:"Used to determine the icon elment of a given option",defaultValue:{value:"(option: any) => option?.icon",computed:!1}},helperText:{required:!1,tsType:{name:"string"},description:"The label content."},label:{required:!1,tsType:{name:"union",raw:"string | React.ReactNode",elements:[{name:"string"},{name:"ReactReactNode",raw:"React.ReactNode"}]},description:"The label content."},maxHeight:{required:!1,tsType:{name:"number"},description:"Maximum height of the menu component"},mode:{required:!1,tsType:{name:"literal",value:'"search"'},description:"The autocomplete mode with predefined defaults"},placeholder:{required:!1,tsType:{name:"string"},description:""},startAdornment:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Element placed before the input element"},width:{required:!1,tsType:{name:"number"},description:"Width of the component."},getOptionLabel:{defaultValue:{value:"(option: Value | any) => option?.label ?? option",computed:!1},required:!1}},composes:["Omit"]};export{V as T};
