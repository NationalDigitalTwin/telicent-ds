import{f,w as v,u as n}from"./index-B5S312j6.js";import{j as r}from"./jsx-runtime-Nms4Y4qS.js";import{P as b}from"./PrimaryButton-C6kfx75N.js";import{S as g}from"./UserStatus-Bd-po-72.js";import"./DataSetIcon-BkGqgbEj.js";import"./Text-DPiTUAXb.js";import"./Chip-CuvFjp6R.js";import"./TreeView-CQjma0GP.js";import{B as y}from"./Box-cMJItZWL.js";import{I as x}from"./InputBase-DAcB6bD2.js";import"./index-BwDkhjyp.js";import"./_commonjsHelpers-BosuxZz1.js";import"./Button-BFXfL3pE.js";import"./createTheme-CnHyYZiq.js";import"./extends-CCbyfPlC.js";import"./styled-jK8V3O51.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-B7e5eAmX.js";import"./generateUtilityClasses-BGohe2Km.js";import"./ButtonBase-Er_LceZN.js";import"./TransitionGroupContext-Dii4aaAC.js";import"./assertThisInitialized-B9jnkVVz.js";import"./inheritsLoose-B7h9gheN.js";import"./useForkRef-UxOPvILp.js";import"./SvgIcon-C67DTzBI.js";import"./index-B4cTrqDe.js";import"./index-D3ylJrlI.js";import"./Stack-CQt_0ICX.js";import"./styled-DIAKr2Jf.js";import"./Avatar-e-pslTjb.js";import"./index-Ce_nUbHw.js";import"./createSvgIcon-Dt4Rk6ns.js";import"./mergeSlotProps-BTNqYSHa.js";import"./isHostComponent-DVu5iVWx.js";import"./IconButton-BTXAq08u.js";import"./Menu-4GzERHpP.js";import"./index-D8zF22Iw.js";import"./Modal-Bh2jQC7s.js";import"./useTheme-DGd8psJl.js";import"./utils-DOhIVSbh.js";import"./index-B8XB3FuZ.js";import"./getScrollbarSize-Bqq2hMjQ.js";import"./useSlotProps-CIvTNmGa.js";import"./ownerWindow-COOHErMu.js";import"./Grow-CFEed8lE.js";import"./Paper-Bt1avxBe.js";import"./debounce-Be36O1Ab.js";import"./MenuList-BaiCNsbG.js";import"./List-Vl0e-Exg.js";import"./Typography-CJaAKyn9.js";import"./Chip-QYx8wbL0.js";import"./useId-bIDWZ5VS.js";import"./colorManipulator-9GsPPk9G.js";import"./useFormControl-DPp5-Ez4.js";const o=({autoFocus:e=!1,placeholder:t="Search",inputRef:l,name:m,value:u,onBlur:c,onChange:d,onSearch:h})=>r.jsxs(y,{id:"search-box",height:44,width:600,display:"flex",alignItems:"center",component:"form",onSubmit:h,children:[r.jsx(x,{id:"search-box-input",type:"search",sx:{height:"100%",width:"100%",borderWidth:1,borderRightWidth:0,borderColor:"#6D6D6D",borderStyle:"solid",borderTopLeftRadius:4,borderBottomLeftRadius:4},inputProps:{sx:{paddingInline:1.5}},ref:l,autoFocus:e,placeholder:t,onBlur:c,onChange:d,value:u,name:m}),r.jsx(b,{id:"search-box-button","aria-label":"search",type:"submit",sx:{borderTopLeftRadius:0,borderBottomLeftRadius:0,borderTopRightRadius:4,borderBottomRightRadius:4,height:"100%"},disableElevation:!0,children:r.jsx(g,{size:"xl"})})]});try{o.displayName="SearchBox",o.__docgenInfo={description:"",displayName:"SearchBox",props:{autoFocus:{defaultValue:{value:"false"},description:"If true, the input element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"Pass a ref to the input element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement> | ForwardedRef<HTMLInputElement>"}},onBlur:{defaultValue:null,description:`Callback fired when the input looses focus (i.e. blurred).
Notice that the first argument (event) might be undefined.
@param event
@returns void`,name:"onBlur",required:!1,type:{name:"((event: FocusEvent<HTMLInputElement, Element>) => void)"}},onChange:{defaultValue:null,description:`Callback fired when the value is changed.
@param event The event source of the callback. You can pull out the new value by accessing event.target.value (string).
@returns void`,name:"onChange",required:!1,type:{name:"((event: ChangeEvent<HTMLInputElement>) => void)"}},onSearch:{defaultValue:null,description:`Callback fired when the search button is clicked.
@param event
@returns`,name:"onSearch",required:!1,type:{name:"((event: MouseEvent<HTMLFormElement, MouseEvent>) => void)"}},name:{defaultValue:null,description:"Name attribute of the input element.",name:"name",required:!1,type:{name:"string"}},placeholder:{defaultValue:{value:"Search"},description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the input element, required for a controlled component.",name:"value",required:!1,type:{name:"string"}}}}}catch{}const xe={title:"Inputs/Searchbox",component:o,tags:["autodocs"],args:{onSearch:f()}},a={args:{placeholder:"Search all"},play:async({canvasElement:e})=>{const t=v(e);await n.type(t.getByRole("searchbox"),"data catalog"),await n.click(t.getByRole("button",{name:"search"}))}};var i,s,p;a.parameters={...a.parameters,docs:{...(i=a.parameters)==null?void 0:i.docs,source:{originalSource:`{
  args: {
    placeholder: "Search all"
  },
  play: async ({
    canvasElement
  }) => {
    const canvas = within(canvasElement);
    await userEvent.type(canvas.getByRole("searchbox"), "data catalog");
    await userEvent.click(canvas.getByRole("button", {
      name: "search"
    }));
  }
}`,...(p=(s=a.parameters)==null?void 0:s.docs)==null?void 0:p.source}}};const Ee=["Example"];export{a as Example,Ee as __namedExportsOrder,xe as default};
