import{f,w as v,u as r}from"./index-R3fZrLBo.js";import{a as g,j as n}from"./DefaultPropsProvider-BtHbA0VU.js";import{P as b}from"./PrimaryButton-Bc_R5nCK.js";import"./TelicentMark-BBOKqb96.js";import"./DataSetIcon-DsGT7IFR.js";import"./UserIcon-C1aAmYHQ.js";import"./UserProfile-BfplP8Ws.js";import{S as R}from"./UserStatus-DuMU4D8p.js";import"./Text-DbVIG1jU.js";import"./Chip-ACVHw5As.js";import"./TreeView-jAlqStSJ.js";import"./UserProfileContent-oGgpE1lR.js";import{I as E}from"./InputBase-GoKfmZlB.js";import{B as y}from"./ButtonBase-D7y6zplg.js";import"./extends-EO7Nsyo1.js";import"./index-uubelm5h.js";import"./Button-DIuBcF8t.js";import"./styled-Buz43Nzf.js";import"./generateUtilityClasses-TKejRb6k.js";import"./SvgIcon-S8kFURX4.js";import"./useTheme-D3IlMF1k.js";import"./useTheme-Ckz7wL11.js";import"./Container-CFYF8oBU.js";import"./styled-BcC_VGTi.js";import"./useThemeProps-2Kac9Ors.js";import"./index-DXqQCM1T.js";import"./Menu-BIob4-3N.js";import"./index-CB99OiCM.js";import"./Popover-5L_d726T.js";import"./utils-C0stDFpQ.js";import"./inheritsLoose-DR8r8Ogv.js";import"./index-CfOt2XX2.js";import"./TransitionGroupContext-CLVPPxcC.js";import"./resolveComponentProps-D7nVAgbQ.js";import"./Paper-Dc6_5F_g.js";import"./index-Bres9Iq4.js";import"./createSvgIcon-DDKUBMCt.js";import"./colorManipulator-CLgUjkf2.js";import"./GlobalStyles-BjGl2I2w.js";import"./assertThisInitialized-B9jnkVVz.js";const m=({autoFocus:a=!1,placeholder:e="Search",inputRef:p,name:u,value:l,onBlur:c,onChange:d,onSearch:h})=>g(y,{id:"search-box",height:44,width:600,display:"flex",alignItems:"center",component:"form",onSubmit:h,children:[n(E,{id:"search-box-input",type:"search",sx:{height:"100%",width:"100%",borderWidth:1,borderRightWidth:0,borderColor:"#6D6D6D",borderStyle:"solid",borderTopLeftRadius:4,borderBottomLeftRadius:4},inputProps:{sx:{paddingInline:1.5}},ref:p,autoFocus:a,placeholder:e,onBlur:c,onChange:d,value:l,name:u}),n(b,{id:"search-box-button","aria-label":"search",type:"submit",sx:{borderTopLeftRadius:0,borderBottomLeftRadius:0,borderTopRightRadius:4,borderBottomRightRadius:4,height:"100%"},disableElevation:!0,children:n(R,{size:"xl"})})]});m.__docgenInfo={description:"",methods:[],displayName:"SearchBox",props:{autoFocus:{required:!1,tsType:{name:"boolean"},description:"If true, the input element is focused during the first mount.",defaultValue:{value:"false",computed:!1}},inputRef:{required:!1,tsType:{name:"union",raw:"React.ForwardedRef<HTMLInputElement> | React.RefObject<HTMLInputElement>",elements:[{name:"ReactForwardedRef",raw:"React.ForwardedRef<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},{name:"ReactRefObject",raw:"React.RefObject<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]}]},description:"Pass a ref to the input element."},onBlur:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: React.FocusEvent<HTMLInputElement>) => void",signature:{arguments:[{type:{name:"ReactFocusEvent",raw:"React.FocusEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},name:"event"}],return:{name:"void"}}},description:`Callback fired when the input looses focus (i.e. blurred).
Notice that the first argument (event) might be undefined.
@param event
@returns void`},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: React.ChangeEvent<HTMLInputElement>) => void",signature:{arguments:[{type:{name:"ReactChangeEvent",raw:"React.ChangeEvent<HTMLInputElement>",elements:[{name:"HTMLInputElement"}]},name:"event"}],return:{name:"void"}}},description:`Callback fired when the value is changed.
@param event The event source of the callback. You can pull out the new value by accessing event.target.value (string).
@returns void`},onSearch:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: React.MouseEvent<HTMLFormElement>) => void",signature:{arguments:[{type:{name:"ReactMouseEvent",raw:"React.MouseEvent<HTMLFormElement>",elements:[{name:"HTMLFormElement"}]},name:"event"}],return:{name:"void"}}},description:`Callback fired when the search button is clicked.
@param event
@returns`},name:{required:!1,tsType:{name:'InputBaseProps["name"]',raw:'InputBaseProps["name"]'},description:"Name attribute of the input element."},placeholder:{required:!1,tsType:{name:'InputBaseProps["placeholder"]',raw:'InputBaseProps["placeholder"]'},description:"The short hint displayed in the input before the user enters a value.",defaultValue:{value:'"Search"',computed:!1}},value:{required:!1,tsType:{name:"Value"},description:"The value of the input element, required for a controlled component."}}};const me={title:"Inputs/Search/SearchBox",component:m,tags:["autodocs"],args:{onSearch:f()}},t={args:{placeholder:"Search all"},play:async({canvasElement:a})=>{const e=v(a);await r.type(e.getByRole("searchbox"),"data catalog"),await r.click(e.getByRole("button",{name:"search"}))}};var o,i,s;t.parameters={...t.parameters,docs:{...(o=t.parameters)==null?void 0:o.docs,source:{originalSource:`{
  args: {
    placeholder: "Search all"
  },
  play: async ({
    canvasElement
  }) => {
    const canvas = within(canvasElement);
    await userEvent.type(canvas.getByRole("searchbox"), "data catalog");
    await userEvent.click(canvas.getByRole("button", {
      name: "search"
    }));
  }
}`,...(s=(i=t.parameters)==null?void 0:i.docs)==null?void 0:s.source}}};const pe=["Example"];export{t as Example,pe as __namedExportsOrder,me as default};
